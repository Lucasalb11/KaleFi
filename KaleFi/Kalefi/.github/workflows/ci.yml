name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build contracts
        working-directory: contracts
        run: |
          cd kalefi
          cargo build --target wasm32-unknown-unknown --release
          cd ../greeting
          cargo build --target wasm32-unknown-unknown --release

      - name: Run contract tests
        working-directory: contracts
        run: |
          cd kalefi
          cargo test --target wasm32-unknown-unknown
          cd ../greeting
          cargo test --target wasm32-unknown-unknown

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Type check
        run: yarn type-check

      - name: Lint
        run: yarn lint

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --audit-level moderate

  build-wasm:
    name: Build WASM Contracts
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Build optimized WASM
        working-directory: contracts
        run: |
          cd kalefi
          cargo build --target wasm32-unknown-unknown --release
          cd ../greeting
          cargo build --target wasm32-unknown-unknown --release

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-contracts
          path: |
            contracts/kalefi/target/wasm32-unknown-unknown/release/*.wasm
            contracts/greeting/target/wasm32-unknown-unknown/release/*.wasm
          retention-days: 30

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test-contracts, test-frontend, security-audit]
    if: github.ref == 'refs/heads/main'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Soroban CLI
        run: |
          curl -sSfL https://soroban.stellar.org/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure networks
        run: |
          soroban config network add --global testnet https://soroban-testnet.stellar.org
          soroban config network add --global futurenet https://rpc-futurenet.stellar.org

      - name: Deploy contracts
        working-directory: contracts
        run: |
          # Add deployment logic here
          echo "Deploying to testnet..."
          # ./deploy_on_testnet.sh kalefi

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-testnet]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed! Check the logs for details."
          # Add notification logic here (Slack, Discord, etc.)
